{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO3WvMTDBZbr/dePbnSbe1b",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sharipov2522/My-NBA-game-analysis/blob/main/MyNbaGameAnalysis.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import csv as csv\n",
        "import re as re\n",
        "\n",
        "def load_file(filename):\n",
        "    result = []\n",
        "    with open (filename, 'r') as csvfile:\n",
        "        csvreader = csv.reader(csvfile, delimiter='|')\n",
        "        fieldes = next(csvreader)\n",
        "\n",
        "        for row in csvreader:\n",
        "            result.append(row)\n",
        "    return result\n",
        "\n",
        "def upload_param(players, regexp, actions, abr):\n",
        "    param_list = []\n",
        "\n",
        "    for play in actions:\n",
        "        present_action = play[7]\n",
        "        try:\n",
        "            param_regexp = re.compile(regexp)\n",
        "            param = param_regexp.search(present_action)[1]\n",
        "            param_list.append(param)\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "    for param in param_list:\n",
        "        try:\n",
        "            for player in players[\"home_team\"][\"players_data\"]:\n",
        "                if player[\"player_name\"] == param:\n",
        "                    player[abr] += 1\n",
        "            for player in players[\"away_team\"][\"players_data\"]:\n",
        "                if player[\"player_name\"] == param:\n",
        "                    player[abr] += 1\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "\n",
        "def format(play_by_play_moves):\n",
        "    result = {\"home_team\": {\"name\": \"\", \"players_data\": []}, \"away_team\": {\"name\": \"\", \"players_data\": []}}\n",
        "\n",
        "    for play in play_by_play_moves:\n",
        "        result[\"away_team\"][\"name\"] = play[3]\n",
        "        result[\"home_team\"][\"name\"] = play[4]\n",
        "        break\n",
        "\n",
        "    for play in play_by_play_moves:\n",
        "        home_team = play[4]\n",
        "        relevant_team = play[2]\n",
        "        present_action = play[7]\n",
        "\n",
        "        try:\n",
        "            player_name_regexp = re.compile(r\"^([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\")\n",
        "            player_name = player_name_regexp.search(present_action)[1]\n",
        "            player = {\"player_name\": player_name, \"FG\": 0, \"FGM\": 0, \"FGA\": 0, \"FG%\": 0.0, \"3P\": 0, \"3PM\": 0, \"3PA\": 0, \"3P%\": 0.0, \"2P\": 0, \"2PM\": 0, \"FT\": 0, \"FTM\": 0, \"FTA\": 0, \"FT%\": 0.0, \"ORB\": 0, \"DRB\": 0, \"TRB\": 0, \"AST\": 0, \"STL\": 0, \"BLK\": 0, \"TOV\": 0, \"PF\": 0, \"PTS\": 0, \"MCPFT\": 0, \"MICPFT\": 0}\n",
        "\n",
        "            if(relevant_team == home_team):\n",
        "                if not player in result[\"home_team\"][\"players_data\"]:\n",
        "                    result[\"home_team\"][\"players_data\"].append(player)\n",
        "            else:\n",
        "                if not player in result[\"away_team\"][\"players_data\"]:\n",
        "                    result[\"away_team\"][\"players_data\"].append(player)\n",
        "        except:\n",
        "            pass\n",
        "    return result\n",
        "\n",
        "def analyse_nba_game():\n",
        "    play_by_play_moves = load_file(\"my_nba_game.txt\")\n",
        "    players_data = format(play_by_play_moves)\n",
        "    upload_param(players_data, \"^([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) makes 3-pt\", play_by_play_moves, \"3P\")\n",
        "    upload_param(players_data, \"^([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) misses 3-pt\", play_by_play_moves, \"3PM\")\n",
        "    upload_param(players_data, \"^([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) makes 2-pt\", play_by_play_moves, \"2P\")\n",
        "    upload_param(players_data, \"^([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) misses 2-pt\", play_by_play_moves, \"2PM\")\n",
        "    upload_param(players_data, \"Offensive rebound by ([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\", play_by_play_moves, \"ORB\")\n",
        "    upload_param(players_data, \"Defensive rebound by ([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\", play_by_play_moves, \"DRB\")\n",
        "    upload_param(players_data, \"block by ([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\", play_by_play_moves, \"BLK\")\n",
        "    upload_param(players_data, \"steal by ([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\", play_by_play_moves, \"STL\")\n",
        "    upload_param(players_data, \"Turnover by ([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\", play_by_play_moves, \"TOV\")\n",
        "    upload_param(players_data, \"assist by ([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\", play_by_play_moves, \"AST\")\n",
        "    upload_param(players_data, \"Personal foul by ([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,})\", play_by_play_moves, \"PF\")\n",
        "    upload_param(players_data, \"([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) makes free throw\", play_by_play_moves, \"FT\")\n",
        "    upload_param(players_data, \"([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) misses free throw\", play_by_play_moves, \"FTM\")\n",
        "    upload_param(players_data, \"([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) makes clear path free throw \", play_by_play_moves, \"MCPFT\")\n",
        "    upload_param(players_data, \"([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) misses clear path free throw \", play_by_play_moves, \"MICPFT\")\n",
        "\n",
        "    for team in players_data.items():\n",
        "        for player in team[1][\"players_data\"]:\n",
        "            player[\"FG\"] = player[\"3P\"] + player[\"2P\"]\n",
        "            player[\"FGA\"] = player[\"3P\"] + player[\"2P\"] + \\\n",
        "                            player[\"3PM\"] + player[\"2PM\"]\n",
        "            player['3PA'] = player['3P'] + player['3PM']\n",
        "            player[\"FT\"] = player[\"FT\"] * 1 + player[\"MCPFT\"] + player[\"MICPFT\"]\n",
        "            player[\"FTA\"] = player[\"FT\"] + player[\"FTM\"]\n",
        "\n",
        "            player[\"PTS\"] = player[\"3P\"] * 3 + player[\"2P\"] * 2 + player[\"FT\"]\n",
        "\n",
        "            player[\"TRB\"] = player[\"DRB\"] + player[\"ORB\"]\n",
        "\n",
        "            try:\n",
        "                player[\"FG%\"] = round(player[\"FG\"] / player[\"FGA\"], 3)\n",
        "            except:\n",
        "               pass\n",
        "\n",
        "            try:\n",
        "                player['3P%'] = round(player['3P'] / player['3PA'], 3)\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "            try:\n",
        "                player[\"FT%\"] = round(player[\"FT\"] / player[\"FTA\"], 3)\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "    for team in players_data.items():\n",
        "        for player in team[1][\"players_data\"]:\n",
        "            del player[\"FGM\"]\n",
        "            del player[\"2P\"]\n",
        "            del player[\"2PM\"]\n",
        "            del player[\"3PM\"]\n",
        "            del player[\"FTM\"]\n",
        "            del player[\"MCPFT\"]\n",
        "            del player[\"MICPFT\"]\n",
        "\n",
        "    return players_data\n",
        "\n",
        "def print_table():\n",
        "    players_data = analyse_nba_game()\n",
        "    for team in players_data.items():\n",
        "        fg, fga, fgp, p3, p3a, p3p, ft, fta, ftp, orb, drb, trb, ast, stl, blk, tov, pf, pts = 0, 0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n",
        "        print(f'{\"Players name\":<20} | {\"FG\":<5} | {\"FGA\":<5} | {\"FG%\":<6} | {\"3P\":<5} | {\"3PA\":<5} | {\"3P%\":<6} | {\"FT\":<5} | {\"FTA\":<5} | {\"FT%\":<6} | {\"ORB\":<5} | {\"DRB\":<5} | {\"TRB\":<5} | {\"AST\":<5} | {\"STL\":<5} | {\"BLK\":<5} | {\"TOV\":<5} | {\"PF\":<5} | {\"PTS\":<5} ')\n",
        "        for player in team[1][\"players_data\"]:\n",
        "            print(f'{player[\"player_name\"]:<20} | {player[\"FG\"]:<5} | {player[\"FGA\"]:<5} | {player[\"FG%\"]:<6} | {player[\"3P\"]:<5} | {player[\"3PA\"]:<5} | {player[\"3P%\"]:<6}| {player[\"FT\"]:<5} | {player[\"FTA\"]:<5} | {player[\"FT%\"]:<6} | {player[\"ORB\"]:<5} | {player[\"DRB\"]:<5} | {player[\"TRB\"]:<5} | {player[\"AST\"]:<5} | {player[\"STL\"]:<5} | {player[\"BLK\"]:<5} | {player[\"TOV\"]:<5} | {player[\"PF\"]:<5} | {player[\"PTS\"]:<5} ')\n",
        "            fg += player[\"FG\"]\n",
        "            fga += player[\"FGA\"]\n",
        "            p3 += player[\"3P\"]\n",
        "            p3a += player[\"3PA\"]\n",
        "            ft += player[\"FT\"]\n",
        "            fta += player[\"FTA\"]\n",
        "            orb += player[\"ORB\"]\n",
        "            drb += player[\"DRB\"]\n",
        "            ast += player[\"AST\"]\n",
        "            stl += player[\"STL\"]\n",
        "            blk += player[\"BLK\"]\n",
        "            tov += player[\"TOV\"]\n",
        "            pf += player[\"PF\"]\n",
        "            pts += player[\"PTS\"]\n",
        "\n",
        "        fgp = round(fg / fga, 3) if fga > 0 else 0\n",
        "        p3p = round(p3 / p3a, 3) if fga > 0 else 0\n",
        "        ftp = round(ft / fta, 3) if fga > 0 else 0\n",
        "        trb = orb + drb\n",
        "\n",
        "        print(f'{\"Team Totals\":<20} | {fg:<5} | {fga:<5} | {fgp:<6} | {p3:<5} | {p3a:<5} | {p3p:<6} | {ft:<5} | {fta:<5} | {ftp:<6} | {orb:<5} | {drb:<5} | {trb:<5} | {ast:<5} | {stl:<5} | {blk:<5} | {tov:<5} | {pf:<5} | {pts:<5} ')\n",
        "        print(\"\\n\")\n",
        "\n",
        "\n",
        "print_table()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "id": "2rlMOHYBiGTl",
        "outputId": "37b0e836-3387-45ec-d972-f55101e6b2da"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-dd930a4d4314>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m \u001b[0mprint_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-1-dd930a4d4314>\u001b[0m in \u001b[0;36mprint_table\u001b[0;34m()\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mprint_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 126\u001b[0;31m     \u001b[0mplayers_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0manalyse_nba_game\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    127\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mteam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mplayers_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m         \u001b[0mfg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfga\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfgp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp3a\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp3p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mftp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mast\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtov\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-1-dd930a4d4314>\u001b[0m in \u001b[0;36manalyse_nba_game\u001b[0;34m()\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0manalyse_nba_game\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m     \u001b[0mplay_by_play_moves\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"my_nba_game.txt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0mplayers_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplay_by_play_moves\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m     \u001b[0mupload_param\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplayers_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"^([A-Z]\\. [A-Z]\\w{1,}|[A-Z]\\. [A-Z]\\w{1,}\\-\\w{1,}) makes 3-pt\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplay_by_play_moves\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"3P\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-1-dd930a4d4314>\u001b[0m in \u001b[0;36mload_file\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcsvfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m         \u001b[0mcsvreader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcsv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcsvfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelimiter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'|'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0mfieldes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcsvreader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'my_nba_game.txt'"
          ]
        }
      ]
    }
  ]
}